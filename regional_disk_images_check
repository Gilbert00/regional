#!/bin/bash
#
# v 0.0.3
#

#set -x

readonly Err="***Error***:"

readonly AllImages="$(basename $0)_images.txt"
[[ -f $AllImages ]] && rm $AllImages
readonly ImagesSorted="$(basename $0)_sorted.txt"

function check_dir() {
# $Dir

	if [[ ! -d $1 ]]; then
		echo "$Err Directory $1 don't exists !"
		exit 10
	fi
}

function check_subdir_images() {
# $SubDir
  local SubDir=$1
	local ImageFile
	local ImageName
	local Img
	local Dir1=$(echo $SubDir | sed 's/\//-/g')

	local OneDirImages="/tmp/$(basename $0)_onedir_$Dir1.tmp" # images names

	ls -lrt $SubDir/* | awk '{print $NF}' | awk -F_ '{print $1"_"$2}' | xargs basename -a | sort -u > $OneDirImages
	
	while read ImageName
	do
#		echo $ImageName

		OneImage0="/tmp/$(basename $0)_oneimage_${ImageName}_0" # image files
		OneImage1="/tmp/$(basename $0)_oneimage_${ImageName}_1" # image coded files
		OneImage2="/tmp/$(basename $0)_oneimage_${ImageName}_2" # image sorted coded files
		
		ls -lrt $SubDir/$ImageName* | awk '{print $NF}' | xargs basename -a > $OneImage0
		
		[[ -f $OneImage1 ]] && rm -f $OneImage1
		while read Img
		do
#		  echo $Img
#			aCF=($(echo $Img | gawk -F_ '{f=split($4,af,"."); if($3=="HDR") c="H0" else c=$3; print substr(c,2),substr(af[1],2) }'))
			aCF=($(echo $Img | gawk -F_ '{$4=="HDR" ? af[1]="H0" : split($4,af,"."); print substr($3,2),substr(af[1],2) }'))
#			echo "${aCF[@]}"
			I=$(echo $Img | gawk -F. '{switch($NF) {case "img":i=0;break; case "info":i=1;break; default:i=2}; print i}')
			echo "$ImageName ${aCF[0]} ${aCF[1]} $I" >> $OneImage1
		done < $OneImage0
		sort -k1 -k2n -k3n -k4n $OneImage1 > $OneImage2
		
		check_copy_one $OneImage2
		if [[ $? -gt 0 ]]; then
		  echo "$Err Image has many copies:"
			echo_image $ImageName $SubDir
			continue
		fi

		check_bad_ext $OneImage2
		if [[ $? -gt 0 ]]; then
		  echo "$Err Image has unsupported files:"
			echo_image $ImageName $SubDir
			continue
		fi
		
		check_eq_ext $OneImage2
		if [[ $? -gt 0 ]]; then
		  echo "$Err Some needed files are absent:"		  
			echo_image $ImageName $SubDir
			continue
		fi
		
		check_sequence $OneImage2 0
		if [[ $? -gt 0 ]]; then
		  echo "$Err Some needed files are absent:"		  
			echo_image $ImageName $SubDir
			continue
		fi

		check_sequence $OneImage2 1
		if [[ $? -gt 0 ]]; then
		  echo "$Err Some needed files are absent:"		  
			echo_image $ImageName $SubDir
			continue
		fi
		
#		return	#!!!
	done < $OneDirImages
}

function check_copy_one() {
# $OneImage2
  local N=$(awk '{print $2}' $1 | sort -u | wc -l)
#	echo $N
	[[ $N -eq 1 ]] && return 0
	return 1
}

function check_bad_ext() {
# $OneImage2
	local N=$(awk '{if($4>=2) print $4}' $1 | wc -l)
	[[ $N -eq 0 ]] && return 0
	return 1
}

function check_eq_ext() {
# $OneImage2
	local N0=$(awk '{if($4==0) print $4}' $1 | sort -u | wc -l)
	local N1=$(awk '{if($4==1) print $4}' $1 | sort -u | wc -l)
	[[ $N0 -eq $N1 ]] && return 0
	return 1
}

function check_sequence() {
# $OneImage2 $IExt

	local IF
	local FFile="/tmp/$(basename $0)_ffile_$IExt.tmp"
	awk '{if($4==f) print $3}' f=$2 $1 | sort -k1n > $FFile
	
	local i=0
	while read IF
	do 
		[[ $i -ne $IF ]] && return 1
		i=$((i+1))
	done < $FFile
	
	return 0
}

function echo_image() {
# $ImageName $SubDir
  echo $2
	ls -lrt $2/$1* | cut -f1-3,6- -d " "
	echo ""
}

#-------------------------------
# main

for Dir in adisk bdisk cdisk
do
	Dir0="/$Dir"
	check_dir $Dir0

	SubDirFile="$(basename $0)_${Dir}_subdirs.txt"

# All subdirs with images files 	
	find $Dir0 -name "*.img" -print -o -name "*.info"-o -name "*.filepart" -print | awk -F_ '{print $1"_"$2}' | xargs dirname | sort -u > $SubDirFile

	while read SubDir
	do
		:	
		check_subdir_images	$SubDir
#		exit 0		#!!!
	done < $SubDirFile
	
done	

exit 0

