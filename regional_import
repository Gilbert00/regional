#!/bin/bash
#
#set -x
readonly Version="0.1.0"
# 
#

readonly Err="***Error***:"

# if [ $# -ne 1 ]; then
  # echo "Usage: $(basename $0) <ImagesDir>"
  # exit 1
# fi

#ImagesDir=$1
ImagesFile=/tmp/$(basename $0)_images_$$.tmp

readonly Media="p0ubkp-nb2020lp.region.vtb.ru"
#readonly Media=$(hostname -f)
readonly DSTU="p0ubkp-nb2020lp-hcart-robot-tld-8"
readonly DVP="RegionalBackups"

readonly CMDimport="/usr/openv/netbackup/bin/admincmd/bpimport"
readonly CmdDupl="/usr/openv/netbackup/bin/admincmd/bpduplicate"
readonly DirLog="/usr/openv/netbackup/logs/user_ops"
readonly ImageData="/tmp/$(basename $0)_image_$$.tmp"

readonly cBeforeImport=0
readonly cAfterImport1=1
readonly cAfterImport2=2
readonly cAfterDupl=3
readonly cAfterDiskDel=4

RC=0

Copy=0
Retn=0

function check_dir() {
# $Dir

	if [[ ! -d $1 ]]; then
		echo "$Err Directory $1 don't exists !"
		return 10
	fi
 
  echo "Directory: $1"
	return 0
}

function curr_time() {
#  echo "at $(date +%Y.%m.%d_%H:%M:%S)"
  echo "$(date +%Y.%m.%d_%H:%M:%S)"

}

function set_ImagesFile() {
# $ImagesDir $ImagesFile

#	ls $1/*.img | awk -F_ '{if ($4=="F1" || $4~/^F1\./) print $1"_"$2}' | awk -F/ '{print $NF}' > $2
	ls $1/*.img | awk -F_ '{if ($4=="F1" || $4~/^F1\./) print $1"_"$2,$3}'  > $2
}

function do_import1() {
# $ImagesDir

#  return
  nohup $CMDimport -create_db_info -id $1 -server $Media -L $DirLog/$(basename $0)_1.log -l -v &
	PID=$!
	echo "PID:$!"
  wait $PID
	RC=$?
	echo "$(curr_time) Dir $1: Finish Import 1, RC=$RC "
}

function do_import2() {
# $Image

  local DT="-s 01/01/2001 00:00:00 -e 01/01/2030 00:00:00"
	echo "$(curr_time) Image $1: Start import"
#  return
	
  nohup $CMDimport -backupid $1 -L $DirLog/$(basename $0)_import2_${1}.log -l $DT &
	PID=$!
	echo "PID:$!"
  wait $PID
	RC=$?
	echo "$(curr_time) Image $1: Finish import, RC=$RC "
	return $RC
}

function do_dupl() {
# $Image $Copy

	get_image_data $1 $ImageData
	get_dupl_params
	local DT=""
	local Own=""
	echo "$(curr_time) Image $1: Start duplication"
#  return
	
  nohup $CmdDupl $DT -backupid $1 -cn $2 -dp $DVP -dstunit $DSTU -rl $Retn -set_primary 1 -fail_on_error 0 $Own -L $DirLog/$(basename $0)_dupl_${1}.log -v & 
	PID=$!
  echo "PID:$!"
  wait $PID
	RC=$?
	echo "$(curr_time) Image $1: Finish duplication, RC=$RC"
	return $RC
}

function delete_disk_copy() {
# $Image $Copy
  local Image=$1
	local Copy=$2
	
	get_image_status $Image
	local ImageStatus=$?
	if [[ $ImageStatus -ne cAfterDupl ]]; then
	  echo "$Err Image $Image - Invalid status $ImageStatus"
	  return 1
	fi
	
#	get_image_data $Image $ImageData
#	local Copy=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==0) print $2}')
#  return
	
	/usr/openv/netbackup/bin/admincmd/bpimage -deletecopy $Copy -backupid $Image
	PID=$!
  wait $PID
	RC=$?
	echo "$(curr_time) Image $1: Finish Exclude the disk copy $Copy, RC=$RC"	
	return $RC
}

function get_image_data() {
# $Image $ImageData

	/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -option INCLUDE_PRE_IMPORT -l > $2 2>&1
#	/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -l > $2 2>&1
}

get_dupl_params() {
	Retn=$(grep '^IMAGE' $ImageData | awk '{print $13}')
#TO-DO: Copy from disks image.	Done in one_dir_import
#	Copy=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $2}' | sed -n '1p')
}

readonly cMediaTypeDisk=0
readonly cMediaTypeTape=2

function get_image_status() {
# $Image

#  local Status=0
	
	get_image_data $1 $ImageData

	local N=$(grep -c 'no entity was found' $ImageData)
	if [ $N -gt 0 ]; then
#		local Nimm=$(check_bpimmedia $ImageDir $Image)
		return 0
	fi
	
	N=$(grep "^IMAGE" $ImageData | awk '{print $29}')
	[[ $N -eq 1 ]] && return 1
	
	local NCopies=$(grep '^IMAGE' $ImageData | awk '{print $21}')
	if [ $NCopies -eq 0 ]; then	# ???
	  return 1
	elif [ $NCopies -eq 1 ]; then	
	  local MediaType=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $6}')
		if [ $MediaType -eq $cMediaTypeDisk ]; then
			get_dupl_params
			return 2
		else	# $MediaType -eq $cMediaTypeTape
			return 4
		fi
	fi
	
	return 3	# $NCopies -eq 2
}

function one_dir_import() {
# $SubDir
	ImagesDir=$1

	check_dir $ImagesDir
	[[ $? -gt 0 ]] && return $?

	set_ImagesFile $ImagesDir $ImagesFile

	do_import1 $ImagesDir

	while read ImageAndDir Copy
	do
	  Image=$(echo $ImageAndDir | awk -F/ '{print $NF}')
		Copy=${Copy:1}
		echo "Image: $Image, Copy: $Copy"
		get_image_status $Image
		ImageStatus=$?
		case $ImageStatus in
			0)
				do_import1 $ImagesDir
				get_image_status $Image
		    ImageStatus=$?
				if [[ $ImageStatus -eq 0 ]]; then
					echo "$Err The Image $Image don't pre-imported !"
					continue
	#		    exit 1
				fi
				;&
			1)
				do_import2 $Image
				[[ $RC -gt 0 ]] && [[ $RC -ne 191 ]] && continue
				;&
			2)
				do_dupl $Image $Copy
	#			echo "The Image $Image is duplicated."
				[[ $RC -gt 0 ]] && continue
				;&
			3)
				delete_disk_copy $Image $Copy
	#			echo "The Image $Image - copy on disk is excluded."
				;;
			4)
				echo "$(curr_time) Image $Image: copy on disk had been excluded."
				;;
			*)
			echo "$Err Image $Image - Invalid status $ImageStatus !"
		esac
	done < $ImagesFile

}

function send_ended_mail() {
# $EndedTxt

  mailx -s "Program $(basename $0)" backup_group@vtb.ru <<EOF
   $1	
EOF
	
  return 0
}

#--------------------
# main

echo "Version:$Version"

for Dir in  adisk bdisk cdisk
do
	Dir0="/$Dir"
	check_dir $Dir0

	SubDirFile="$(basename $0)_${Dir}_subdirs.txt"

	find $Dir0 -name "*.img" -print | awk -F_ '{if ($4=="F1" || $4~/^F1\./) print $1"_"$2}' | xargs dirname | sort -u > $SubDirFile

	while read SubDir
	do
		:	
		one_dir_import $SubDir
	done < $SubDirFile

done	

EndedTxt="$(curr_time) Program $(basename $0) is ended."
send_ended_mail $EndedTxt

echo $EndedTxt

exit 0

