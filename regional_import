#!/bin/bash
#
# v 0.0.4
#

#set -x

readonly Err="***Error***:"

if [ $# -ne 1 ]; then
  echo "Usage: $(basename $0) <ImagesDir>"
  exit 1
fi

ImagesDir=$1
ImagesFile=/tmp/$(basename $0)_images_$$.tmp

readonly Media="p0ubkp-nb2020lp.region.vtb.ru"
#readonly Media=$(hostname -f)
readonly DSTU="p0ubkp-nb2020lp-hcart-robot-tld-8"
readonly DVP="RegionalBackups"

readonly CMDimport="/usr/openv/netbackup/bin/admincmd/bpimport"
readonly CmdDupl="/usr/openv/netbackup/bin/admincmd/bpduplicate"
readonly DirLog="/usr/openv/netbackup/logs/user_ops"
readonly ImageData="/tmp/$(basename $0)_image_$$.tmp"

readonly cBeforeImport=0
readonly cAfterImport1=1
readonly cAfterImport2=2
readonly cAfterDupl=3
readonly cAfterDiskDel=4

RC=0

Copy=0
Retn=0

function check_dir() {
# $Dir

	if [[ ! -d $1 ]]; then
		echo "$Err Directory $1 don't exists !"
		exit 10
	fi
 
  echo "Directory: $1"
}

function set_ImagesFile() {
# $ImagesDir $ImagesFile

	ls $1/*.img | awk -F_ '{if ($4=="F1") print $1"_"$2}' | awk -F/ '{print $NF}' > $2
}

function do_import1() {
# $ImagesDir

#  return
  nohup $CMDimport -create_db_info -id $1 -server $Media -L $DirLog/$(basename $0)_1.log -l -v &
	PID=$!
	echo "PID:$!"
  wait $PID
	RC=$?
	echo "Finish Import 1 of Dir $1, RC=$RC"
}

function do_import2() {
# $Image

  local DT="-s 01/01/2001 00:00:00 -e 01/01/2030 00:00:00"
	echo "Start import of image $1"
#  return
	
  nohup $CMDimport -backupid $1 -L $DirLog/$(basename $0)_${1}_2.log -l $DT &
	PID=$!
	echo "PID:$!"
  wait $PID
	RC=$?
	echo "Finish import of image $1, RC=$RC"
}

function do_dupl() {
# $Image

	get_image_data $1 $ImageData
	get_dupl_params
	local DT=""
	local Own=""
	echo "Start duplication of image $1"
#  return
	
  nohup $CmdDupl $DT -backupid $1 -cn $Copy -dp $DVP -dstunit $DSTU -rl $Retn -set_primary 1 -fail_on_error 0 $Own -L $DirLog/$(basename $0)_dupl_${1}.log -v & 
	PID=$!
  echo "PID:$!"
  wait $PID
	RC=$?
	echo "Finish duplication of image $1, RC=$RC"
}

function delete_disk_copy() {
# $Image
  local Image=$1
	
	get_image_data $1 $ImageData
	local Copy=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==0) print $2}')
#  return
	
	/usr/openv/netbackup/bin/admincmd/bpimage -deletecopy $Copy -backupid $Image
	PID=$!
  wait $PID
	RC=$?
	echo "Finish Exclude disk copy $Copy, $1, RC=$RC"	
}

function get_image_data() {
# $Image $ImageData

#	/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -option INCLUDE_PRE_IMPORT -l > $2 2>&1
	/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -l > $2 2>&1
}

get_dupl_params() {
	Retn=$(grep '^IMAGE' $ImageData | awk '{print $13}')
	Copy=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $2}')
}

readonly ImMediaData="/tmp/$(basename $0)_immedia_$$.tmp"

function check_bpimmedia() {
#	$ImageDir $Image

	local ImgDir=$1
	local Img=$2
	/usr/openv/netbackup/bin/admincmd/bpimmedia -dt 1 -mediaid $ImgDir -l -option ONLY_PRE_IMPORT > $ImMediaData 2>&1 
	local N=$(grep -c "$Img" $ImMediaData)
	if [ $N -gt 0 ]; then
	  echo "1"
	else
		echo "0"
	fi
}

readonly cMediaTypeDisk=0
readonly cMediaTypeTape=2

function get_image_status() {
# $Image

#  local Status=0
	
	get_image_data $1 $ImageData

	local N=$(grep -c 'no entity was found' $ImageData)
	if [ $N -gt 0 ]; then
		local Nimm=$(check_bpimmedia $ImageDir $Image)
		echo "$Nimm"
		return
	fi
	
	local NCopies=$(grep '^IMAGE' $ImageData | awk '{print $21}')
	if [ $NCopies -eq 0 ]; then	# ???
	  echo "1"
		return
	elif [ $NCopies -eq 1 ]; then	
	  local MediaType=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $6}')
		if [ $MediaType -eq $cMediaTypeDisk ]; then
			get_dupl_params
			echo "2"
		else	# $MediaType -eq $cMediaTypeTape
			echo "4"
		fi
		return	
	fi
	
	echo "3"	# $NCopies -eq 2
}

check_dir $ImagesDir

set_ImagesFile $ImagesDir $ImagesFile

do_import1 $ImagesDir

while read Image
do
  echo "Image: $Image"
	ImageStatus=$(get_image_status $Image)
	case $ImageStatus in
		0)
			do_import1 $ImagesDir
			ImageStatus=$(get_image_status $Image)
			if [[ $ImageStatus -eq 0 ]]; then
				echo "$Err Image $Image don't pre-imported !"
				continue
#		    exit 1
			fi
			;&
		1)
			do_import2 $Image
			[[ $RC -gt 0 ]] && continue
			;&
		2)
			do_dupl $Image
#			echo "Image $Image is duplicated."
			[[ $RC -gt 0 ]] && continue
			;&
		3)
			delete_disk_copy $Image
#			echo "Image $Image - copy on disk is excluded."
			;;
		4)
			echo "Image $Image - copy on disk had been excluded."
			;;
		*)
		echo "$Err Invalid ImageStatus:$ImageStatus for $Image !"
	esac
done < $ImagesFile

exit 0

