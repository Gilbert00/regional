#!/bin/bash
#
# v 0.1.1
#

set -x

readonly Err="***Error***:"

readonly Media="p0ubkp-nb2020lp.region.vtb.ru"
readonly Client=$Media

readonly DirLog="/usr/openv/netbackup/logs/user_ops"
readonly ImageData="/tmp/$(basename $0)_image_$$.tmp"
readonly Tapes="/tmp/$(basename $0)_tapes_$$.tmp"

readonly ImagesFile="emm_images.txt"
readonly StatusFile="regional_emm_status.txt"
[[ -f $StatusFile ]] && rm $StatusFile

readonly DVP="RegionalBackups"

readonly cBeforeImport=0
readonly cAfterImport1=1
readonly cAfterImport2=2
readonly cAfterDupl=3
readonly cAfterDiskDel=4

Copy=0
Retn=0

function check_dir() {
# $Dir

	if [[ ! -d /$1 ]]; then
		echo "$Err Directory /$1 don't exists !"
		exit 10
	fi
}

function get_image_data() {
# $Image $ImageData

/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -option INCLUDE_PRE_IMPORT -l > $2 2>&1
#	/usr/openv/netbackup/bin/admincmd/bpimagelist -backupid $1 -l > $2 2>&1
}

#readonly ImMediaData="/tmp/$(basename $0)_immedia_$$.tmp"

# function check_bpimmedia() {
# #	$ImageDir $Image

	# local ImgDir=$1
	# local Img=$2
	# /usr/openv/netbackup/bin/admincmd/bpimmedia -dt 1 -mediaid $ImgDir -l -option ONLY_PRE_IMPORT > $ImMediaData 2>&1 
	# local N=$(grep -c "$Img" $ImMediaData)
	# if [ $N -gt 0 ]; then
	  # echo "1"
	# else
		# echo "0"
	# fi
# }

readonly cMediaTypeDisk=0
readonly cMediaTypeTape=2

readonly cMediaEmpty="---"
	MediaDisk=$cMediaEmpty
	MediaTape=$cMediaEmpty
	
ExpireDate=""	

function get_image_status() {
# $Image

#  local Status=0
	
	get_image_data $1 $ImageData
	
	local N=$(grep -c 'no entity was found' $ImageData)
	if [ $N -gt 0 ]; then
#		local Nimm=$(check_bpimmedia $ImageDir $Image)
		return 0
	fi

	UTime=$(grep '^IMAGE' $ImageData | awk '{print $16}')
	ExpireDate=$(get_date_on_utime $UTime)
	
	N=$(grep "^IMAGE" $ImageData | awk '{print $29}')
	[[ $N -eq 1 ]] && return 1
	
	local NCopies=$(grep '^IMAGE' $ImageData | awk '{print $21}')
	if [ $NCopies -eq 0 ]; then	# ???
	  return 1
	elif [ $NCopies -eq 1 ]; then	
	  local MediaType=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $6}')
		if [ $MediaType -eq $cMediaTypeDisk ]; then
		  MediaDisk=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $9}' | xargs dirname)
			Host=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==MT) print $10}' MT=$cMediaTypeDisk | sed -n '1p')
			return 2
		else	# $MediaType -eq $cMediaTypeTape
		  MediaTape=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $9}')
			return 4
		fi
#		return	
	fi

#	$NCopies -gt 1	
#	N=$(grep '^FRAG' $ImageData | awk '{if ($3==1) print $6}' | sort -u | wc -l)
#	if [ $N -gt 1 ]; then
		MediaTape=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==MT) print $9}' MT=$cMediaTypeTape | sed -n '1p')
		MediaDisk=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==MT) print $9}' MT=$cMediaTypeDisk | xargs dirname | sed -n '1p')
		MediaTape=${MediaTape:-$cMediaEmpty}
		MediaDisk=${MediaDisk:-$cMediaEmpty}
		Host=$(grep '^FRAG' $ImageData | awk '{if ($3==1 && $6==MT) print $10}' MT=$cMediaTypeDisk | sed -n '1p')
#	else
#	fi
	
	return 3	# $NCopies -eq 2
}

function get_date_on_utime() {
# UTime

	echo "$(date -d @$1 +%Y-%m-%d_%H:%M:%S)"
}

# function get_ivp() {
# # $DVP

	# echo $(/usr/openv/volmgr/bin/vmpool -list_all -bx | grep $1 | awk '{print $2}')
# }
 
#-----------------------
# main

#IVP=$(get_ivp $DVP)

/usr/openv/volmgr/bin/vmquery -pn $DVP -b | sed '1,3d' | awk '{print $1}' > $Tapes

/usr/openv/netbackup/bin/admincmd/bpimagelist -server $Media  -d 01/01/2001 -e 06/30/2030 -option INCLUDE_PRE_IMPORT -idonly | awk '{print $10}' > $ImagesFile
	
while read Image
do
	MediaDisk=$cMediaEmpty
	MediaTape=$cMediaEmpty
	Host=""
	get_image_status $Image
	ImageStatus=$? 
#	check existence on disk	
	IsOnDisk='-'
#	echo "MediaDisk:$MediaDisk MediaTape:$MediaTape"

	if [ $MediaDisk != $cMediaEmpty ]; then
#		check_host
	  [[ ! -z $Host ]] && [[ $Host != $Client ]] && continue
		
		NDisk=$(ls $MediaDisk/$Image*F1*.img 2>&1 | grep -c 'No such file')
		[ $NDisk -eq 0 ] &&	IsOnDisk='+'
	fi

#	check_volume_pool	
	if [ $MediaTape != $cMediaEmpty ]; then
		NTape=$(grep -c $MediaTape $Tapes)
		[[ $NTape -eq 0 ]] && continue
	fi	
	
	echo "$ImageStatus $Image $MediaDisk $IsOnDisk $MediaTape $ExpireDate" >> $StatusFile

done < $ImagesFile

exit 0

